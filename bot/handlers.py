import os

import requests

from aiogram import types, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

import config
from data import database

from bot import keyboards
from bot.states import AuthStates
from bot.until import check_and_remove_key
from bot.bot_templates import schedule_message_templates
from datetime import datetime, timedelta

from lk import lk_func, parsing_profile
from app_functions.update_subjects import update_subjects
from lk.parsing_profile import parsing_profile
from app_functions.schedule import schedule, work_with_data

from hashlib import md5


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    @dp.message(Command("start"))
    async def start_command(message: types.Message):
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboards.connect())

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @dp.callback_query(lambda c: c.data == "connect")
    async def connect_callback(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        await state.set_state(AuthStates.waiting_for_email)
        await state.update_data(user_id=callback.from_user.id, username=callback.from_user.username)
        await callback.answer()

    @dp.message(AuthStates.waiting_for_email)
    async def process_email(message: types.Message, state: FSMContext):
        await state.update_data(email=message.text)
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
        await state.set_state(AuthStates.waiting_for_password)

    @dp.message(AuthStates.waiting_for_password)
    async def process_password(message: types.Message, state: FSMContext):
        data = await state.get_data()
        with requests.Session() as session:
            if lk_func.auth(session, data['email'], message.text)[0]:
                prof = parsing_profile(session)
                database.add_to_db_reg(data['user_id'], data['username'], data['email'], message.text, prof['–ì—Ä—É–ø–ø–∞'],
                                       prof['–°–µ–º–µ—Å—Ç—Ä'])
                await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!", reply_markup=keyboards.profile())
                await profile_message(message)
                await update_subjects(message.from_user.id)
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboards.connect())

            await state.clear()

    # üìÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    @dp.message(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å" or m.text == "üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
    async def profile_message(message: types.Message):
        user = database.get_user(message.from_user.id)

        if user:
            username, sub, sub_end_date = user["username"], user["sub"], user["sub_end_date"]
            sub_status = "–ê–∫—Ç–∏–≤–Ω–∞" if sub else "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

            if sub and sub_end_date:
                end_date = datetime.strptime(sub_end_date, '%Y-%m-%d')
                remaining_days = (end_date - datetime.now()).days
                sub_info = f"üìù –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status} ({remaining_days} –¥–Ω–µ–π)"
            else:
                sub_info = f"üìù –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}"

            await message.answer(
                f"üë§ –ù–∏–∫: {username}\n{sub_info}",
                reply_markup=keyboards.profile()
            )
        else:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    @dp.message(lambda m: m.text == "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    async def subscription_message(message: types.Message, state: FSMContext):
        await state.set_state(AuthStates.waiting_for_key)
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á:")

    @dp.message(AuthStates.waiting_for_key)
    async def handle_subscription(message: types.Message, state: FSMContext):
        if check_and_remove_key(os.path.join('keys.txt'), message.text):
            await message.answer("‚úÖ –í–µ—Ä–Ω—ã–π –∫–ª—é—á\n")
            user_id = message.from_user.id
            database.sub(user_id, 1)
        elif message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards.main())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")
            await profile_message(message)
        await state.clear()

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    @dp.message(lambda m: m.text == "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    async def schedule_message(message: types.Message):
        await message.answer("–¢–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=keyboards.schedule_type())

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    @dp.message(lambda m: m.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
    async def day_message(message: types.Message):
        try:
            result = schedule_message_templates(message.from_user.id, "day", 0)
            await message.answer(result, parse_mode=ParseMode.HTML)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    @dp.message(lambda m: m.text == "‚û°Ô∏è –ó–∞–≤—Ç—Ä–∞")
    async def next_day_message(message: types.Message):
        try:
            result = schedule_message_templates(message.from_user.id, "day", 1)
            await message.answer(result, parse_mode=ParseMode.HTML)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
    @dp.message(lambda m: m.text == "7Ô∏è‚É£ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è")
    async def week_message(message: types.Message):
        try:
            result = schedule_message_templates(message.from_user.id, "week", 0)
            await message.answer(result, parse_mode=ParseMode.HTML)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
    @dp.message(lambda m: m.text == "‚û°Ô∏è –°–ª–µ–¥ –Ω–µ–¥–µ–ª—è")
    async def next_week_message(message: types.Message):
        try:
            result = schedule_message_templates(message.from_user.id, "week", 1)
            await message.answer(result, parse_mode=ParseMode.HTML)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    @dp.message(lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    async def settings_message(message: types.Message):
        await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboards.sett())

    @dp.callback_query(lambda c: c.data in ["toggle_notifications", "toggle_button_notifications"])
    async def toggle_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        if not database.is_sub_activ(user_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
            return

        if callback.data == "toggle_notifications":
            state = database.sw_notif(user_id)
            status = "üü¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!" if state else "üî¥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!"
        else:
            state = database.sw_butt_notif(user_id)
            status = "üü¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã!" if state else "üî¥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!"

        await callback.message.edit_text(status, reply_markup=keyboards.sett())
        await callback.answer()

    @dp.callback_query(lambda c: c.data.startswith("av_"))
    async def handle_av_actions(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        action = callback.data  # "av_settings", "av_sw" –∏ —Ç.–¥.

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if not database.is_sub_activ(user_id):
            await callback.answer("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", show_alert=True)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if action == "av_sw":
            new_status = database.sw_av(user_id)
            status_text = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if new_status else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
            await callback.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω: {status_text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –õ–Æ–ë–û–ì–û –¥–µ–π—Å—Ç–≤–∏—è
        current_status = database.get_user(user_id)['av_status']
        status_display = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if current_status else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"

        await callback.message.edit_text(
            f"ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å–µ—â–µ–Ω–∏—è\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_display}",
            reply_markup=keyboards.av_settings()
        )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    @dp.callback_query(lambda c: c.data == "subject_settings")
    async def subject_settings_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        if not database.is_sub_activ(user_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
            return

        subjects = database.get_subjects_status(user_id)
        await callback.message.edit_text(
            "üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å–µ—â–µ–Ω–∏—è:",
            reply_markup=keyboards.subject_settings_keyboard(subjects)
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    @dp.callback_query(lambda c: c.data.startswith("subj_"))
    async def subject_toggle_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        subject_hash = callback.data.replace("subj_", "")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ —Ö–µ—à—É
        subjects = database.get_subjects_status(user_id)
        selected_subject = next(
            (subj for subj in subjects
             if md5(subj.encode()).hexdigest()[:8] == subject_hash),
            None
        )

        if not selected_subject:
            await callback.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await callback.message.edit_reply_markup(
            reply_markup=keyboards.subject_settings_keyboard(
                database.get_subjects_status(user_id)
            )
        )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    @dp.callback_query(lambda c: c.data == "refresh_subjects")
    async def refresh_subjects(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        await update_subjects(user_id)
        subjects = database.get_subjects_status(user_id)
        await callback.message.edit_text(
            "üîÑ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω:",
            reply_markup=keyboards.subject_settings_keyboard(subjects)
        )
        await callback.answer()

    # –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å–µ—â–µ–Ω–∏—è
    @dp.callback_query(lambda c: c.data == "back_to_autovisit")
    async def back_to_autovisit_callback(callback: types.CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        await state.clear()
        current_status = database.get_user(user_id)["av_status"]
        status_text = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if current_status else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
        message_text = f"ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å–µ—â–µ–Ω–∏—è\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}"
        await callback.message.edit_text(message_text, reply_markup=keyboards.av_settings())

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    # üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @dp.message(lambda m: m.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    async def back_to_main(message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards.main())

    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    @dp.callback_query(lambda c: c.data == "delete_account")
    async def delete_account_callback(callback: types.CallbackQuery):
        database.del_acc(callback.from_user.id)
        await callback.message.answer("üóëÔ∏è –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?",
                                      reply_markup=keyboards.connect())
        await callback.answer()
