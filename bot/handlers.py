import os

import requests

from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from data import database

from bot import keyboards
from bot.states import AuthStates
from bot.until import check_and_remove_key

from datetime import datetime

from lk import lk_func, parsing_profile


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    @dp.message(Command("start"))
    async def start_command(message: types.Message):
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboards.connect())

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @dp.callback_query(lambda c: c.data == "connect")
    async def connect_callback(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        await state.set_state(AuthStates.waiting_for_email)
        await state.update_data(user_id=callback.from_user.id, username=callback.from_user.username)
        await callback.answer()

    @dp.message(AuthStates.waiting_for_email)
    async def process_email(message: types.Message, state: FSMContext):
        await state.update_data(email=message.text)
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
        await state.set_state(AuthStates.waiting_for_password)

    @dp.message(AuthStates.waiting_for_password)
    async def process_password(message: types.Message, state: FSMContext):
        data = await state.get_data()
        with requests.Session() as session:
            if lk_func.auth(session, data['email'], message.text)[0]:
                prof = parsing_profile.parsing_profile(session)
                database.save_to_db(data['user_id'], data['username'], data['email'], message.text, prof['–ì—Ä—É–ø–ø–∞'], prof['–°–µ–º–µ—Å—Ç—Ä'])
                await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!", reply_markup=keyboards.main())
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboards.connect())

            await state.clear()

    # üìÑ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    @dp.message(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å" or m.text == "üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
    async def profile_message(message: types.Message):
        conn, cursor = database.connect()
        cursor = conn.cursor()
        cursor.execute('SELECT username, sub, sub_end_date FROM users WHERE user_id = ?', (message.from_user.id,))
        user = cursor.fetchone()
        conn.close()

        if user:
            username, subscription, sub_end_date = user
            sub_status = "–ê–∫—Ç–∏–≤–Ω–∞" if subscription else "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

            if subscription and sub_end_date:
                end_date = datetime.strptime(sub_end_date, '%Y-%m-%d')
                remaining_days = (end_date - datetime.now()).days
                sub_info = f"üìù –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status} ({remaining_days} –¥–Ω–µ–π)"
            else:
                sub_info = f"üìù –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}"

            await message.answer(
                f"üë§ –ù–∏–∫: {username}\n{sub_info}",
                reply_markup=keyboards.profile()
            )
        else:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    @dp.message(lambda m: m.text == "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    async def subscription_message(message: types.Message, state: FSMContext):
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á:", reply_markup=keyboards.back_to_profile())
        await state.set_state(AuthStates.waiting_for_key)

    @dp.message(AuthStates.waiting_for_key)
    async def handle_subscription(message: types.Message, state: FSMContext):
        if check_and_remove_key(os.path.join('..', 'keys.txt'), message.text):
            await message.answer("‚úÖ –í–µ—Ä–Ω—ã–π –∫–ª—é—á\n")
            user_id = message.from_user.id
            database.sub(user_id, 1)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")
        await profile_message(message)
        await state.clear()

    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    @dp.message(lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    async def settings_message(message: types.Message):
        await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboards.sett())
        await message.answer("üîΩ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ))

    # üîô –ù–∞–∑–∞–¥ (–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    @dp.message(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
    async def back_to_main(message: types.Message):
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards.main())

    @dp.callback_query(lambda c: c.data in ["toggle_autovisit", "toggle_notifications", "toggle_button_notifications"])
    async def toggle_callback(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        if not database.is_sub_activ(user_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
            return

        if callback.data == "toggle_autovisit":
            state = database.sw_av(user_id)
            status = "üü¢ –ê–≤—Ç–æ–ø–æ—Å–µ—â–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!" if state else "üî¥ –ê–≤—Ç–æ–ø–æ—Å–µ—â–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ!"
        elif callback.data == "toggle_notifications":
            state = database.sw_notif(user_id)
            status = "üü¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!" if state else "üî¥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!"
        else:
            state = database.sw_butt_notif(user_id)
            status = "üü¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã!" if state else "üî¥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã!"

        await callback.message.edit_text(status, reply_markup=keyboards.sett())
        await callback.answer()

    # üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    @dp.callback_query(lambda c: c.data == "delete_account")
    async def delete_account_callback(callback: types.CallbackQuery):
        database.del_acc(callback.from_user.id)
        await callback.message.answer("üóëÔ∏è –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?",
                                      reply_markup=keyboards.connect())
        await callback.answer()
